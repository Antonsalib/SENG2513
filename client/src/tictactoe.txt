// added to keep track of most recent working version of Failed



import "./App.css";
import { useState, useEffect, Fragment, useCallback } from "react";
import PlayerName from "./PlayerName";
import { playSound } from './PlaySound';

function TicTacToe() {
  // ===== STATE MANAGEMENT =====
  // Game state
  const [board, setBoard] = useState([["", "", ""], ["", "", ""], ["", "", ""]]);
  const [currentPlayer, setCurrentPlayer] = useState("X");
  const [status, setStatus] = useState("ongoing");
  const [loading, setLoading] = useState(false);
  const [gameId, setGameId] = useState(null);
  
  // Player configuration
  const [playerShape, setPlayerShape] = useState("X"); 
  const aiShape = playerShape === "X" ? "O" : "X";
  
  // Player info
  const [playerName, setPlayerName] = useState(() => {
    return localStorage.getItem('ticTacToePlayerName') || '';
  });
  const [isNameOpen, setIsNameOpen] = useState(false);
  
  // Scores
  const [scores, setScores] = useState(() => {
    const savedScores = localStorage.getItem('ticTacToeScores');
    return savedScores ? JSON.parse(savedScores) : { X: 0, O: 0, Ties: 0 };
  });

  // ===== GAME ID GENERATION =====
  const generateGameId = useCallback(() => {
    return Date.now().toString();
  }, []);

  // ===== DATABASE OPERATIONS =====
  const createPlayerInDatabase = useCallback((name) => {
    fetch('http://localhost:3001/api/player/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        playerName: name
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log('Player created or found:', data);
    })
    .catch(error => {
      console.error('Error creating player:', error);
    });
  }, []);

  const updateLeaderboard = useCallback((result) => {
    if (!playerName) return;
    
    const dbPlayerName = playerName.trim() || 'Guest Player';
    console.log(`Updating leaderboard for ${dbPlayerName} with result: ${result}`);

    // Create player first
    fetch('http://localhost:3001/api/player/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        playerName: dbPlayerName
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to ensure player exists');
      }
      
      // Then update stats
      return fetch('http://localhost:3001/api/player/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          playerName: dbPlayerName,
          result: result
        })
      });
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to update stats');
      }
      return response.json();
    })
    .then(data => {
      console.log('Player stats updated:', data);
    })
    .catch(error => {
      console.error('Error updating player stats:', error);
    });
    
    // Update AI player stats
    const aiResult = result === 'win' ? 'loss' : result === 'loss' ? 'win' : 'tie';
    
    fetch('http://localhost:3001/api/player/update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        playerName: 'AI Player',
        result: aiResult
      })
    })
    .then(response => response.json())
    .catch(error => {
      console.error('Error updating AI stats:', error);
    });
  }, [playerName]);

  const logMove = useCallback((player, row, col, gameResult = null) => {
    if (!gameId) return;
    
    fetch('http://localhost:3001/api/int', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        game_id: gameId,
        player,
        row,
        col,
        gameStatus: gameResult || status,
        timestamp: new Date().toISOString()
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .catch(error => {
      console.error('Error logging move:', error);
    });
  }, [status, gameId]);

  // ===== GAME LOGIC =====
  const checkGameStatus = useCallback(() => {
    // Check rows
    for (let i = 0; i < 3; i++) {
      if (board[i][0] && board[i][0] === board[i][1] && board[i][1] === board[i][2]) {
        return board[i][0];
      }
    }

    // Check columns
    for (let i = 0; i < 3; i++) {
      if (board[0][i] && board[0][i] === board[1][i] && board[1][i] === board[2][i]) {
        return board[0][i];
      }
    }

    // Check diagonals
    if (board[0][0] && board[0][0] === board[1][1] && board[1][1] === board[2][2]) {
      return board[0][0];
    }

    if (board[0][2] && board[0][2] === board[1][1] && board[1][1] === board[2][0]) {
      return board[0][2];
    }

    // Check for tie
    if (!board.some(row => row.includes(""))) {
      return "Tie";
    }

    return null;
  }, [board]);

  // ===== AI LOGIC =====
  const makeAIMove = useCallback(() => {
    setLoading(true);
    
    const boardJson = JSON.stringify({ board });
    
    console.log("Sending board to AI:", boardJson);
    
    fetch(`http://localhost:3001/api/game?board=${encodeURIComponent(boardJson)}`)
      .then((res) => {
        if (!res.ok) {
          throw new Error(`HTTP error! Status: ${res.status}`);
        }
        return res.json();
      })
      .then((data) => {
        console.log("AI response received:", data);
        
        if (!data.aiResponse) {
          throw new Error("No AI response received");
        }
        
        const aiResponseObj = JSON.parse(data.aiResponse);
        
        if (!aiResponseObj.board || !Array.isArray(aiResponseObj.board)) {
          throw new Error("Invalid AI response format");
        }
        
        const aiBoard = aiResponseObj.board;
        
        // Find which cell the AI played in
        let moveRow = -1;
        let moveCol = -1;
        
        outer: for (let i = 0; i < 3; i++) {
          for (let j = 0; j < 3; j++) {
            if (aiBoard[i][j] !== board[i][j]) {
              moveRow = i;
              moveCol = j;
              break outer;
            }
          }
        }
        
        if (moveRow !== -1 && moveCol !== -1) {
          logMove('O', moveRow, moveCol);
        } else {
          console.warn("Could not detect AI move in response");
        }
        
        playSound('/sound/bubble-pop-2-293341.mp3');
        setBoard(aiBoard);
        setCurrentPlayer("X");
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error with AI move:", error);
        setLoading(false);
        alert("There was an error with the AI's move. Please try again.");
      });
  }, [board, logMove]);

  // ===== UI HANDLERS =====
  const handleCellClick = useCallback((row, col) => {
    // Prompt for name if not set
    if (!playerName) {
      setIsNameOpen(true);
      return;
    }
    
    if (board[row][col] === "" && currentPlayer === "X" && status === "ongoing") {
      const newBoard = board.map(r => [...r]);
      newBoard[row][col] = playerShape;
      setBoard(newBoard);
      playSound('/sound/select-sound-121244.mp3');
      setCurrentPlayer("O");

      const result = checkGameStatus();
      logMove('X', row, col, result);
    }
  }, [playerName, board, currentPlayer, status, playerShape, checkGameStatus, logMove]);

  const handleSavePlayerName = useCallback((name) => {
    const validName = name.trim() ? name : 'Guest Player';
    setPlayerName(validName);
    localStorage.setItem('ticTacToePlayerName', validName);
    createPlayerInDatabase(validName);
  }, [createPlayerInDatabase]);

  const resetGame = useCallback(() => {
    setBoard([["", "", ""], ["", "", ""], ["", "", ""]]);
    setCurrentPlayer("X");
    setStatus("ongoing");
    setGameId(generateGameId());
  }, [generateGameId]);

  const resetScoreboard = useCallback(() => {
    setScores({ X: 0, O: 0, Ties: 0 });
    localStorage.removeItem('ticTacToeScores');
  }, []);

  const changePlayerName = useCallback(() => {
    setIsNameOpen(true);
  }, []);

  // ===== EFFECTS =====
  // Initialize a new game with a unique ID
  useEffect(() => {
    setGameId(generateGameId());
  }, [generateGameId]);

  // Save scores to localStorage
  useEffect(() => {
    localStorage.setItem('ticTacToeScores', JSON.stringify(scores));
  }, [scores]);

  // Save player name to localStorage
  useEffect(() => {
    localStorage.setItem('ticTacToePlayerName', playerName);
  }, [playerName]);

  // Process the game result when status changes
useEffect(() => {
  const result = checkGameStatus();

  if (result && status === "ongoing") {
    let newScores = { ...scores };
    let newStatus = "";
    let soundToPlay = "";

    if (result === 'X' || result === 'O' || result === 'â—¼' || result === 'ðŸ”º') {
      // Determine if the player or AI won
      if (result === playerShape) {
        newStatus = `${result} wins`;
        newScores.X += 1;
        updateLeaderboard('win');
        soundToPlay = '/sound/success_bell-6776.mp3';
      } else {
        newStatus = `${result} wins`;
        newScores.O += 1;
        updateLeaderboard('loss');
        soundToPlay = '/sound/080205_life-lost-game-over-89697.mp3';
      }
    } else if (result === 'Tie') {
      newStatus = "It's a tie";
      newScores.Ties += 1;
      updateLeaderboard('tie');
      soundToPlay = '/sound/achievement-video-game-type-1-230515.mp3';
    }

    setScores(newScores);
    setStatus(newStatus);
    
    if (soundToPlay) {
      playSound(soundToPlay);
    }
  }
}, [board, status, scores, playerShape, checkGameStatus, updateLeaderboard]);

  // Trigger AI move when it's AI's turn
  useEffect(() => {
    if (currentPlayer === "O") {
      const result = checkGameStatus();
      if (result === null && status === 'ongoing') {
        makeAIMove();
      }
    }
  }, [currentPlayer, status, makeAIMove, checkGameStatus]);

  // Check if player name exists, otherwise prompt
  useEffect(() => {
    if (!playerName) {
      setIsNameOpen(true);
    } else {
      createPlayerInDatabase(playerName);
    }
  }, [playerName, createPlayerInDatabase]);

  // ===== RENDERING HELPERS =====
  const renderShape = (value) => {
    const shapes = {
      'X': <i className="ri-close-large-line" style={{ fontSize: '32px', color: '#f0a500' }}></i>,
      'O': <i className="ri-circle-line" style={{ fontSize: '32px', color: '#333' }}></i>,
      'â—¼': <i className="ri-square-line" style={{ fontSize: '32px', color: '#3b82f6' }}></i>,
      'ðŸ”º': <i className="ri-triangle-line" style={{ fontSize: '32px', color: '#ef4444' }}></i>
    };
    
    return shapes[value] || null;
  };
  
  const renderCell = (row, col) => {
    return (
      <button
        onClick={() => handleCellClick(row, col)}
        disabled={loading || status !== 'ongoing'}
        className="cell-button">
        {renderShape(board[row][col])}
      </button>
    );
  };

  // ===== COMPONENT RENDER =====
  return (
    <div className="board-container">
      {/* Player Info */}
      <div className="player-info">
        <div className="player-name-display">
          <span>Player: {playerName || 'Guest'}</span>
          <button className="change-name-button" onClick={changePlayerName}>
            Change Name
          </button>
        </div>
      </div>

      {/* Scoreboard */}
      <div className="scoreboard">
        <div className="score-item">
          <span className="player-label">{playerName || 'Player'} ({playerShape})</span>
          <span className="score">{scores.X}</span>
        </div>
        <div className="score-item">
          <span className="player-label">AI ({aiShape})</span>
          <span className="score">{scores.O}</span>
        </div>
        <div className="score-item">
          <span className="player-label">Ties</span>
          <span className="score">{scores.Ties}</span>
        </div>
        <button 
          className="reset-scoreboard-button"
          onClick={resetScoreboard}
        >
          Reset Scores
        </button>
      </div>

      {/* Shape Selector */}
      <div className="shape-selector">
        <label htmlFor="shape-select">Choose your shape: </label>
        <select
          value={playerShape}
          onChange={(e) => setPlayerShape(e.target.value)}
          disabled={status !== 'ongoing' || board.flat().some(cell => cell !== "")}
        >
          <option value="X">X</option>
          <option value="O">O</option>
          <option value="â—¼">Square</option>
          <option value="ðŸ”º">Triangle</option>
        </select>
      </div>

      {/* Game Board */}
      <h1>Tic Tac Toe</h1>
      <div className="board">
        {board.map((row, i) => (
          <div className="board-row" key={i}>
            {row.map((_, j) => (
              <Fragment key={j}>{renderCell(i, j)}</Fragment>
            ))}
          </div>
        ))}
      </div>
      
      {/* Status and Game Controls */}
      <div className="status-text">Status: {status}</div>

      {status !== "ongoing" ? (
        <button className="replay-button" onClick={resetGame}>
          Play Again
        </button>
      ) : (
        <button className="end-round-button" onClick={resetGame}>
          End Round
        </button>
      )}

      {/* Player Name Modal */}
      <PlayerName
        isOpen={isNameOpen}
        onClose={() => setIsNameOpen(false)}
        onSave={handleSavePlayerName}
        savedName={playerName}
      />
    </div>
  );
}

export default TicTacToe;